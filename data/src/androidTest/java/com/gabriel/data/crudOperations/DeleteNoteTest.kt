package com.gabriel.data.crudOperations

import android.content.Context
import androidx.room.Room
import androidx.test.core.app.ApplicationProvider
import androidx.test.ext.junit.runners.AndroidJUnit4
import com.gabriel.data.datasources.NotesDao
import com.gabriel.data.datasources.NotesDatabase
import com.gabriel.data.models.Note
import junit.framework.Assert.assertNotNull
import kotlinx.coroutines.runBlocking
import org.hamcrest.MatcherAssert.assertThat
import org.hamcrest.Matchers.greaterThan
import org.junit.After
import org.junit.Before
import org.junit.Test
import org.junit.runner.RunWith
import java.io.IOException
import java.text.SimpleDateFormat
import java.util.*

@RunWith(AndroidJUnit4::class)
// Making ReadNoteTest a LifeCycleOwner by implementing LifeCycleOwner. We do this to test LiveData objects
class DeleteNoteTest {

    private lateinit var notesDao: NotesDao
    private lateinit var db: NotesDatabase

    @Before
    fun createDb() {
        val context = ApplicationProvider.getApplicationContext<Context>()
        db = Room.inMemoryDatabaseBuilder(
            context,
            NotesDatabase::class.java
        ).build()
        notesDao = db.notesDao()

        runBlocking {
            notesDao.saveNote(
                Note(
                    title = "Test 1",
                    content = "Note 1",
                    createdAt = SimpleDateFormat(
                        "yyyy-MM-dd'T'HH:mm:ss'Z'",
                        Locale.getDefault()
                    ).format(
                        Date()
                    )
                )
            )
            notesDao.saveNote(
                Note(
                    title = "Test 2",
                    content = "Note 2",
                    createdAt = SimpleDateFormat(
                        "yyyy-MM-dd'T'HH:mm:ss'Z'",
                        Locale.getDefault()
                    ).format(
                        Date()
                    )
                )
            )
        }
    }

    @After
    @Throws(IOException::class)
    fun closeDb() {
        db.close()
    }

    @Test
    @Throws(Exception::class)
    fun deleteNote_by_id_success() {
        runBlocking {
            // Autogenerated Integer ID for any Room Entity starts with 1 and increments on each insertion
            // Here we have 2 Note Entities inserted. So, their ID would be 1 & 2
            val note = notesDao.getNoteById(1)
            assertNotNull(note)
            assertThat(notesDao.deleteNotes(note!!), greaterThan(0))
        }
    }
}