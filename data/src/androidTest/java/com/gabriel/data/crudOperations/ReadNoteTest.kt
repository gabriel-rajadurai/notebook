package com.gabriel.data.crudOperations

import android.content.Context
import androidx.arch.core.executor.testing.InstantTaskExecutorRule
import androidx.lifecycle.Lifecycle
import androidx.lifecycle.LifecycleOwner
import androidx.lifecycle.LifecycleRegistry
import androidx.room.Room
import androidx.test.core.app.ApplicationProvider
import androidx.test.ext.junit.runners.AndroidJUnit4
import com.gabriel.data.datasources.NotesDao
import com.gabriel.data.datasources.NotesDatabase
import com.gabriel.data.models.Note
import junit.framework.Assert.assertNotNull
import kotlinx.coroutines.runBlocking
import org.hamcrest.CoreMatchers.equalTo
import org.hamcrest.MatcherAssert.assertThat
import org.junit.*
import org.junit.runner.RunWith
import java.io.IOException
import java.text.SimpleDateFormat
import java.util.*

@RunWith(AndroidJUnit4::class)
// Making ReadNoteTest a LifeCycleOwner by implementing LifeCycleOwner. We do this to test LiveData objects
class ReadNoteTest : LifecycleOwner {

    private lateinit var notesDao: NotesDao
    private lateinit var db: NotesDatabase
    // Creating a LifeCycle object with Lifecycle provider as this
    private val lifecycle = LifecycleRegistry(this)

    init {
        // Invoke LifeCycle Event ON_RESUME to start the LifeCycle.
        // Without this LiveData observers won't trigger
        lifecycle.handleLifecycleEvent(Lifecycle.Event.ON_RESUME)
    }

    // This rule swaps the background asynchronous task executor with a synchronous one
    @get:Rule
    val instantTaskExecutorRule = InstantTaskExecutorRule()

    @Before
    fun createDb() {
        val context = ApplicationProvider.getApplicationContext<Context>()
        db = Room.inMemoryDatabaseBuilder(
            context,
            NotesDatabase::class.java
        ).build()
        notesDao = db.notesDao()

        runBlocking {
            notesDao.saveNote(
                Note(
                    title = "Test 1",
                    content = "Note 1",
                    createdAt = SimpleDateFormat(
                        "yyyy-MM-dd'T'HH:mm:ss'Z'",
                        Locale.getDefault()
                    ).format(
                        Date()
                    )
                )
            )
            notesDao.saveNote(
                Note(
                    title = "Test 2",
                    content = "Note 2",
                    createdAt = SimpleDateFormat(
                        "yyyy-MM-dd'T'HH:mm:ss'Z'",
                        Locale.getDefault()
                    ).format(
                        Date()
                    )
                )
            )
        }
    }

    @After
    @Throws(IOException::class)
    fun closeDb() {
        db.close()
    }

    @Test
    @Throws(Exception::class)
    fun readAllNotes_success() {
        notesDao.getAllNotes().observe(this, androidx.lifecycle.Observer {
            assertThat(it.isNotEmpty(), equalTo(true))
            // Invoke Lifecycle Event ON_DESTROY to prevent the Observer from running for ever
            lifecycle.handleLifecycleEvent(Lifecycle.Event.ON_DESTROY)
        })
    }

    @Test
    @Throws(Exception::class)
    fun readNote_by_id_success() {
        runBlocking {
            // Autogenerated Integer ID for any Room Entity starts with 1 and increments on each insertion
            // Here we have 2 Note Entities inserted. So, their ID would be 1 & 2
            assertNotNull(notesDao.getNoteById(1))
            assertNotNull(notesDao.getNoteById(2))
        }
    }

    override fun getLifecycle(): Lifecycle {
        return lifecycle
    }

}